{
    "collab_server" : "",
    "contents" : "# The purpose of this script is to create a data object (dto) \n# (dto) which will hold all data and metadata from each candidate study of the exercise\n# Run the line below to stitch a basic html output. For elaborated report, run the corresponding .Rmd file\n# knitr::stitch_rmd(script=\"./manipulation/0-ellis-island.R\", output=\"./manipulation/stitched-output/0-ellis-island.md\")\n# These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!\nrm(list=ls(all=TRUE))  #Clear the variables from previous runs.\ncat(\"\\f\") # clear console \n\n# ---- load-packages -----------------------------------------------------------\n# Attach these packages so their functions don't need to be qualified: http://r-pkgs.had.co.nz/namespace.html#search-path\nlibrary(magrittr) # enables piping : %>% \n# Verify these packages are available on the machine, but their functions need to be qualified: http://r-pkgs.had.co.nz/namespace.html#search-path\nrequireNamespace(\"ggplot2\") # graphing\nrequireNamespace(\"readr\")   # data input\nrequireNamespace(\"tidyr\")   # data manipulation\nrequireNamespace(\"dplyr\")   # Avoid attaching dplyr, b/c its function names conflict with a lot of packages (esp base, stats, and plyr).\nrequireNamespace(\"testit\")  # For asserting conditions meet expected patterns.\n# requireNamespace(\"car\")     # For it's `recode()` function.\n\n# ---- load-sources ------------------------------------------------------------\n# Call `base::source()` on any repo file that defines functions needed below.  Ideally, no real operations are performed.\nsource(\"./scripts/common-functions.R\") # used in multiple reports\nsource(\"./scripts/graph-presets.R\") # fonts, colors, themes \n\n# ---- declare-globals ---------------------------------------------------------\nfilePath <- \"./data/shared/raw/musical-notes-frequencies.csv\"\n\n# ---- load-data ---------------------------------------------------------------\nds0 <- read.csv(filePath, stringsAsFactors = F)\nhead(ds0)\n# ---- inspect-data -------------------------------------------------------------\n\n# ---- tweak-data ----------------------------------------------\n\n\n# ---- define-scales ------------------------------------------------------------\nds <- ds0 %>% \n  dplyr::filter(880 >= frequency_hz, frequency_hz >= 82.41) %>% \n  dplyr::mutate(\n    string_6 = (82.41  <= frequency_hz & frequency_hz <= 196.00),\n    string_5 = (110.00 <= frequency_hz & frequency_hz <= 261.63),\n    string_4 = (146.83 <= frequency_hz & frequency_hz <= 349.23 ),\n    string_3 = (196.00 <= frequency_hz & frequency_hz <= 466.16 ),\n    string_2 = (246.94 <= frequency_hz & frequency_hz <= 587.33 ),\n    string_1 = (329.63 <= frequency_hz & frequency_hz <= 783.99  )\n  ) %>% \n  dplyr::select(-note_id, -wavelength_cm, -note2)\nds\n\n# ---- define-function-print-on-fret ---------------------\nview_fret <- function(ds,object=Fmaj7){\n  ds2 <- ds %>%  \n    dplyr::mutate( \n      selector = note %in% object, \n      s6 = ifelse(string_6 & selector,note,\".\"),\n      s5 = ifelse(string_5 & selector,note,\".\"),\n      s4 = ifelse(string_4 & selector,note,\".\"),\n      s3 = ifelse(string_3 & selector,note,\".\"),\n      s2 = ifelse(string_2 & selector,note,\".\"),\n      s1 = ifelse(string_1 & selector,note,\".\") \n    )\n  # play = factor(C_major, levels = c(T,F), labels = c(\"X\",\".\")))    \n  ds2\n  \n  frets <- data.frame(\"fret\" = c(\"o\",\"I\",\"\",\"\",\"\",\"V\",\"\",\"VII\",\"\",\"\",\"\",\"\",\"XII\",\"\",\"\",\"\"))\n  \n  s6 <- ds2 %>% dplyr::filter(string_6) %>% dplyr::select(s6)\n  s5 <- ds2 %>% dplyr::filter(string_5) %>% dplyr::select(s5)\n  s4 <- ds2 %>% dplyr::filter(string_4) %>% dplyr::select(s4)\n  s3 <- ds2 %>% dplyr::filter(string_3) %>% dplyr::select(s3)\n  s2 <- ds2 %>% dplyr::filter(string_2) %>% dplyr::select(s2)\n  s1 <- ds2 %>% dplyr::filter(string_1) %>% dplyr::select(s1)\n  \n  fretboard <- as.data.frame(dplyr::bind_cols(frets, s6, s5, s4,s3, s2, s1, frets))\n  print(fretboard)\n  return(fretboard)\n  \n}\n\nFmaj7 <- c(\"F\",\"E\", \"A\", \"C\")\nGm7 <- c(\"G\", \"F\", \"A-B\", \"D\")\naccord <- Fmaj7\nknitr::kable(view_fret(ds,accord))\n\n\n\n\n\ns6 <- ds %>% dplyr::filter(string_6) %>% dplyr::select(note)fretboard\n\n\n\nbiomarker_name <- paste0(measure_name,\"_HIGH\")\nbiomarker_name_wave <- paste0(biomarker_name,\"_wave\")\n\na <- lazyeval::interp(~ round(mean(var, na.rm=T),2) , var = as.name(measure_name))\nb <- lazyeval::interp(~ var > threashold, var = as.name(\"person_mean\"))\nc <- lazyeval::interp(~ var > threashold, var = as.name(measure_name))\ndots <- list (a,b,c)\n\ndata <- data %>% \n  # dplyr::filter(id %in% ids) %>%\n  # dplyr::select_(\"id\", \"cholesterol\") %>%\n  dplyr::group_by(id) %>% \n  dplyr::mutate_(.dots = setNames(dots, c(\"person_mean\", biomarker_name, biomarker_name_wave))) %>% \n  dplyr::ungroup() %>% \n  dplyr::select(-person_mean)\nif(!keep_wave){\n  data[,biomarker_name_wave] <- NULL\n}\nreturn(data)\n\n  \n# ---- basic-table --------------------------------------------------------------\n\n# ---- basic-graph --------------------------------------------------------------\n\n\n# ---- collect-meta-data -----------------------------------------\n## we begin by extracting the names and (hopefuly their) labels of variables from each dataset\n# and combine them in a single rectanguar object, long/stacked with respect to study names\nnl <- names_labels(ds0)\nreadr::write_csv(nl,\"./data/shared/meta/meta-data-live.csv\")\n\n# ----- import-meta-data-dead -----------------------------------------\n# after the final version of the data files used in the excerside have been obtained\n# we made a dead copy of `./data/shared/derived/meta-raw-live.csv` and named it `./data/shared/meta-data-map.csv`\n# decisions on variables' renaming and classification is encoded in this map\n# reproduce ellis-island script every time you make changes to `meta-data-map.csv`\nmeta <- read.csv(\"./data/shared/meta/meta-data-dead.csv\")\nmeta <- meta %>% dplyr::filter(select==TRUE)\nvariable_names <- as.character(meta[,\"name\"])\n\nds <- ds0 %>% \n  dplyr::select_(.dots = variable_names)\nnames(ds) <- as.character(meta[,\"name_new\"])\nnames(ds) \n\n# ---- tweak-data --------------------------------------------------------------\n\n\n# ---- save-to-disk ------------------------------------------------------------\n\ndto <- list()\ndto[[\"UnitData\"]] <- ds\ndto[['MetaData']] <- meta\n# Save as a compress, binary R dataset.  It's no longer readable with a text editor, but it saves metadata (eg, factor information).\nsaveRDS(dto, file=\"./data/unshared/derived/dto.rds\", compress=\"xz\")\n\n\n\n\n\n",
    "created" : 1467577546302.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2260219206",
    "id" : "27EC86A9",
    "lastKnownWriteTime" : 1467577590,
    "last_content_update" : 1467577593226,
    "path" : "~/GitHub/gitRmusic/sandbox/F-Bb-major.R",
    "project_path" : "sandbox/F-Bb-major.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}